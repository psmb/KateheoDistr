!function (e, t) {if ("object" == typeof exports && "object" == typeof module) module.exports = t(); else if ("function" == typeof define && define.amd) define([], t); else {var n = t(); for (var i in n) ("object" == typeof exports ? exports : e)[i] = n[i]} }(this, function () {return function (e) {function t(i) {if (n[i]) return n[i].exports; var o = n[i] = {exports: {}, id: i, loaded: !1}; return e[i].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports} var n = {}; return t.m = e, t.c = n, t.p = "", t(0)}([function (e, t, n) {e.exports = n(1)}, function (e, t, n) {"use strict"; function i(e) {return e && e.__esModule ? e : {"default": e}} function o(e, t) {function n(e, t) {var n = z, i = n.classNameActiveSlide; e.forEach(function (e, t) {e.classList.contains(i) && e.classList.remove(i)}), e[t].classList.add(i)} function i(e) {var t = z, n = t.infinite, i = e.slice(0, n), o = e.slice(e.length - n, e.length); return i.forEach(function (e) {var t = e.cloneNode(!0); B.appendChild(t)}), o.reverse().forEach(function (e) {var t = e.cloneNode(!0); B.insertBefore(t, B.firstChild)}), B.addEventListener(O.transitionEnd, y), f.call(B.children)} function o(t, n, i) {(0, l["default"])(e, t + ".lory." + n, i)} function a(e, t, n) {var i = B && B.style; i && (i[O.transition + "TimingFunction"] = n, i[O.transition + "Duration"] = t + "ms", O.hasTranslate3d ? i[O.transform] = "translate3d(" + e + "px, 0, 0)" : i[O.transform] = "translate(" + e + "px, 0)")} function d(e, t) {var i = z, r = i.slideSpeed, s = i.slidesToScroll, d = i.infinite, l = i.rewind, c = i.rewindSpeed, u = i.ease, v = i.classNameActiveSlide, m = r, p = t ? P + 1 : P - 1, h = Math.round(M - S); o("before", "slide", {index: P, nextSlide: p}), "number" != typeof e && (e = t ? P + s : P - s), e = Math.min(Math.max(e, 0), _.length - 1), d && void 0 === t && (e += d); var E = Math.min(Math.max(_[e].offsetLeft * -1, h * -1), 0); l && Math.abs(N.x) === h && t && (E = 0, e = 0, m = c), a(E, m, u), N.x = E, _[e].offsetLeft <= h && (P = e), !d || e !== _.length - d && 0 !== e || (t && (P = d), t || (P = _.length - 2 * d), N.x = _[P].offsetLeft * -1, A = function () {a(_[P].offsetLeft * -1, 0, void 0)}), v && n(f.call(_), P), o("after", "slide", {currentSlide: P})} function c() {o("before", "init"), O = (0, s["default"])(), z = r({}, u["default"], t); var a = z, d = a.classNameFrame, l = a.classNameSlideContainer, c = a.classNamePrevCtrl, m = a.classNameNextCtrl, p = a.enableMouseEvents, b = a.classNameActiveSlide; j = e.getElementsByClassName(d)[0], B = j.getElementsByClassName(l)[0], k = e.getElementsByClassName(c)[0], T = e.getElementsByClassName(m)[0], N = {x: B.offsetLeft, y: B.offsetTop}, _ = z.infinite ? i(f.call(B.children)) : f.call(B.children), v(), b && n(_, P), k && T && (k.addEventListener("click", h), T.addEventListener("click", E)), j.addEventListener("touchstart", x), p && (j.addEventListener("mousedown", x), j.addEventListener("click", g)), z.window.addEventListener("resize", C), o("after", "init")} function v() {var e = z, t = e.infinite, i = e.ease, o = e.rewindSpeed, r = e.rewindOnResize, s = e.classNameActiveSlide; M = B.getBoundingClientRect().width || B.offsetWidth, S = j.getBoundingClientRect().width || j.offsetWidth, S === M && (M = _.reduce(function (e, t) {return e + t.getBoundingClientRect().width || t.offsetWidth}, 0)), r ? P = 0 : (i = null, o = 0), t ? (a(_[P + t].offsetLeft * -1, 0, null), P += t, N.x = _[P].offsetLeft * -1) : (a(_[P].offsetLeft * -1, o, i), N.x = _[P].offsetLeft * -1), s && n(f.call(_), P)} function m(e) {d(e)} function p() {return P - z.infinite || 0} function h() {d(!1, !1)} function E() {d(!1, !0)} function b() {o("before", "destroy"), j.removeEventListener(O.transitionEnd, y), j.removeEventListener("touchstart", x), j.removeEventListener("touchmove", L), j.removeEventListener("touchend", w), j.removeEventListener("mousemove", L), j.removeEventListener("mousedown", x), j.removeEventListener("mouseup", w), j.removeEventListener("mouseleave", w), j.removeEventListener("click", g), z.window.removeEventListener("resize", C), k && k.removeEventListener("click", h), T && T.removeEventListener("click", E), z.infinite && Array.apply(null, Array(z.infinite)).forEach(function () {B.removeChild(B.firstChild), B.removeChild(B.lastChild)}), o("after", "destroy")} function y() {A && (A(), A = void 0)} function x(e) {var t = z, n = t.enableMouseEvents, i = e.touches ? e.touches[0] : e; n && (j.addEventListener("mousemove", L), j.addEventListener("mouseup", w), j.addEventListener("mouseleave", w)), j.addEventListener("touchmove", L), j.addEventListener("touchend", w); var r = i.pageX, a = i.pageY; D = {x: r, y: a, time: Date.now()}, F = void 0, R = {}, o("on", "touchstart", {event: e})} function L(e) {var t = e.touches ? e.touches[0] : e, n = t.pageX, i = t.pageY; R = {x: n - D.x, y: i - D.y}, "undefined" == typeof F && (F = !!(F || Math.abs(R.x) < Math.abs(R.y))), !F && D && (e.preventDefault(), a(N.x + R.x, 0, null)), o("on", "touchmove", {event: e})} function w(e) {var t = D ? Date.now() - D.time : void 0, n = Number(t) < 300 && Math.abs(R.x) > 25 || Math.abs(R.x) > S / 3, i = !P && R.x > 0 || P === _.length - 1 && R.x < 0, r = R.x < 0; F || (n && !i ? d(!1, r) : a(N.x, z.snapBackSpeed)), D = void 0, j.removeEventListener("touchmove", L), j.removeEventListener("touchend", w), j.removeEventListener("mousemove", L), j.removeEventListener("mouseup", w), j.removeEventListener("mouseleave", w), o("on", "touchend", {event: e})} function g(e) {R.x && e.preventDefault()} function C(e) {v(), o("on", "resize", {event: e})} var N = void 0, M = void 0, S = void 0, _ = void 0, j = void 0, B = void 0, k = void 0, T = void 0, O = void 0, A = void 0, P = 0, z = {}; "undefined" != typeof jQuery && e instanceof jQuery && (e = e[0]); var D = void 0, R = void 0, F = void 0; return c(), {setup: c, reset: v, slideTo: m, returnIndex: p, prev: h, next: E, destroy: b}} Object.defineProperty(t, "__esModule", {value: !0}); var r = Object.assign || function (e) {for (var t = 1; t < arguments.length; t++) {var n = arguments[t]; for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i])} return e}; t.lory = o; var a = n(2), s = i(a), d = n(3), l = i(d), c = n(5), u = i(c), f = Array.prototype.slice}, function (e, t) {(function (e) {"use strict"; function n() {var t = void 0, n = void 0, i = void 0, o = void 0; return function () {var r = document.createElement("_"), a = r.style, s = void 0; "" === a[s = "webkitTransition"] && (i = "webkitTransitionEnd", n = s), "" === a[s = "transition"] && (i = "transitionend", n = s), "" === a[s = "webkitTransform"] && (t = s), "" === a[s = "msTransform"] && (t = s), "" === a[s = "transform"] && (t = s), document.body.insertBefore(r, null), a[t] = "translate3d(0, 0, 0)", o = !!e.getComputedStyle(r).getPropertyValue(t), document.body.removeChild(r)}(), {transform: t, transition: n, transitionEnd: i, hasTranslate3d: o}} Object.defineProperty(t, "__esModule", {value: !0}), t["default"] = n}).call(t, function () {return this}())}, function (e, t, n) {"use strict"; function i(e) {return e && e.__esModule ? e : {"default": e}} function o(e, t, n) {var i = new a["default"](t, {bubbles: !0, cancelable: !0, detail: n}); e.dispatchEvent(i)} Object.defineProperty(t, "__esModule", {value: !0}), t["default"] = o; var r = n(4), a = i(r)}, function (e, t) {(function (t) {function n() {try {var e = new i("cat", {detail: {foo: "bar"}}); return "cat" === e.type && "bar" === e.detail.foo} catch (t) {} return !1} var i = t.CustomEvent; e.exports = n() ? i : "function" == typeof document.createEvent ? function (e, t) {var n = document.createEvent("CustomEvent"); return t ? n.initCustomEvent(e, t.bubbles, t.cancelable, t.detail) : n.initCustomEvent(e, !1, !1, void 0), n} : function (e, t) {var n = document.createEventObject(); return n.type = e, t ? (n.bubbles = Boolean(t.bubbles), n.cancelable = Boolean(t.cancelable), n.detail = t.detail) : (n.bubbles = !1, n.cancelable = !1, n.detail = void 0), n}}).call(t, function () {return this}())}, function (e, t) {"use strict"; Object.defineProperty(t, "__esModule", {value: !0}), t["default"] = {slidesToScroll: 1, slideSpeed: 300, rewindSpeed: 600, snapBackSpeed: 200, ease: "ease", rewind: !1, infinite: !1, classNameFrame: "js_frame", classNameSlideContainer: "js_slides", classNamePrevCtrl: "js_prev", classNameNextCtrl: "js_next", classNameActiveSlide: "active", enableMouseEvents: !1, window: window, rewindOnResize: !0}}])});

(function () {

    function Carousel(el) {
        var instance = lory(el, {
            infinite: 1,
            enableMouseEvents: true
        });
    }

    // Shuffle Carousel
    [].slice.call(document.querySelectorAll('[data-carousel]')).forEach(function (el) {
        var ul = el.querySelector('ul');
        for (var i = ul.children.length; i >= 0; i--) {
            ul.appendChild(ul.children[Math.random() * i | 0]);
        }
        Carousel(el);
    });
})();

/**
 * sticky-sidebar - A JavaScript plugin for making smart and high performance.
 * @version v3.3.1
 * @link https://github.com/abouolia/sticky-sidebar
 * @author Ahmed Bouhuolia
 * @license The MIT License (MIT)
**/
!function (t, e) {"object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e(t.StickySidebar = {})}(this, function (t) {"use strict"; "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self; var e, i, n = (function (t, e) {(function (t) {Object.defineProperty(t, "__esModule", {value: !0}); var l, n, e = function () {function n(t, e) {for (var i = 0; i < e.length; i++) {var n = e[i]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n)} } return function (t, e, i) {return e && n(t.prototype, e), i && n(t, i), t}}(), i = (l = ".stickySidebar", n = {topSpacing: 0, bottomSpacing: 0, containerSelector: !1, innerWrapperSelector: ".inner-wrapper-sticky", stickyClass: "is-affixed", resizeSensor: !0, minWidth: !1}, function () {function c(t) {var e = this, i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}; if (function (t, e) {if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")}(this, c), this.options = c.extend(n, i), this.sidebar = "string" == typeof t ? document.querySelector(t) : t, void 0 === this.sidebar) throw new Error("There is no specific sidebar element."); this.sidebarInner = !1, this.container = this.sidebar.parentElement, this.affixedType = "STATIC", this.direction = "down", this.support = {transform: !1, transform3d: !1}, this._initialized = !1, this._reStyle = !1, this._breakpoint = !1, this.dimensions = {translateY: 0, maxTranslateY: 0, topSpacing: 0, lastTopSpacing: 0, bottomSpacing: 0, lastBottomSpacing: 0, sidebarHeight: 0, sidebarWidth: 0, containerTop: 0, containerHeight: 0, viewportHeight: 0, viewportTop: 0, lastViewportTop: 0}, ["handleEvent"].forEach(function (t) {e[t] = e[t].bind(e)}), this.initialize()} return e(c, [{key: "initialize", value: function () {var i = this; if (this._setSupportFeatures(), this.options.innerWrapperSelector && (this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector), null === this.sidebarInner && (this.sidebarInner = !1)), !this.sidebarInner) {var t = document.createElement("div"); for (t.setAttribute("class", "inner-wrapper-sticky"), this.sidebar.appendChild(t); this.sidebar.firstChild != t;)t.appendChild(this.sidebar.firstChild); this.sidebarInner = this.sidebar.querySelector(".inner-wrapper-sticky")} if (this.options.containerSelector) {var e = document.querySelectorAll(this.options.containerSelector); if ((e = Array.prototype.slice.call(e)).forEach(function (t, e) {t.contains(i.sidebar) && (i.container = t)}), !e.length) throw new Error("The container does not contains on the sidebar.")} "function" != typeof this.options.topSpacing && (this.options.topSpacing = parseInt(this.options.topSpacing) || 0), "function" != typeof this.options.bottomSpacing && (this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0), this._widthBreakpoint(), this.calcDimensions(), this.stickyPosition(), this.bindEvents(), this._initialized = !0}}, {key: "bindEvents", value: function () {window.addEventListener("resize", this, {passive: !0, capture: !1}), window.addEventListener("scroll", this, {passive: !0, capture: !1}), this.sidebar.addEventListener("update" + l, this), this.options.resizeSensor && "undefined" != typeof ResizeSensor && (new ResizeSensor(this.sidebarInner, this.handleEvent), new ResizeSensor(this.container, this.handleEvent))}}, {key: "handleEvent", value: function (t) {this.updateSticky(t)}}, {key: "calcDimensions", value: function () {if (!this._breakpoint) {var t = this.dimensions; t.containerTop = c.offsetRelative(this.container).top, t.containerHeight = this.container.clientHeight, t.containerBottom = t.containerTop + t.containerHeight, t.sidebarHeight = this.sidebarInner.offsetHeight, t.sidebarWidth = this.sidebarInner.offsetWidth, t.viewportHeight = window.innerHeight, t.maxTranslateY = t.containerHeight - t.sidebarHeight, this._calcDimensionsWithScroll()} }}, {key: "_calcDimensionsWithScroll", value: function () {var t = this.dimensions; t.sidebarLeft = c.offsetRelative(this.sidebar).left, t.viewportTop = document.documentElement.scrollTop || document.body.scrollTop, t.viewportBottom = t.viewportTop + t.viewportHeight, t.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft, t.topSpacing = this.options.topSpacing, t.bottomSpacing = this.options.bottomSpacing, "function" == typeof t.topSpacing && (t.topSpacing = parseInt(t.topSpacing(this.sidebar)) || 0), "function" == typeof t.bottomSpacing && (t.bottomSpacing = parseInt(t.bottomSpacing(this.sidebar)) || 0), "VIEWPORT-TOP" === this.affixedType ? t.topSpacing < t.lastTopSpacing && (t.translateY += t.lastTopSpacing - t.topSpacing, this._reStyle = !0) : "VIEWPORT-BOTTOM" === this.affixedType && t.bottomSpacing < t.lastBottomSpacing && (t.translateY += t.lastBottomSpacing - t.bottomSpacing, this._reStyle = !0), t.lastTopSpacing = t.topSpacing, t.lastBottomSpacing = t.bottomSpacing}}, {key: "isSidebarFitsViewport", value: function () {var t = this.dimensions, e = "down" === this.scrollDirection ? t.lastBottomSpacing : t.lastTopSpacing; return this.dimensions.sidebarHeight + e < this.dimensions.viewportHeight}}, {key: "observeScrollDir", value: function () {var t = this.dimensions; if (t.lastViewportTop !== t.viewportTop) {var e = "down" === this.direction ? Math.min : Math.max; t.viewportTop === e(t.viewportTop, t.lastViewportTop) && (this.direction = "down" === this.direction ? "up" : "down")} }}, {key: "getAffixType", value: function () {this._calcDimensionsWithScroll(); var t = this.dimensions, e = t.viewportTop + t.topSpacing, i = this.affixedType; return e <= t.containerTop || t.containerHeight <= t.sidebarHeight ? (t.translateY = 0, i = "STATIC") : i = "up" === this.direction ? this._getAffixTypeScrollingUp() : this._getAffixTypeScrollingDown(), t.translateY = Math.max(0, t.translateY), t.translateY = Math.min(t.containerHeight, t.translateY), t.translateY = Math.round(t.translateY), t.lastViewportTop = t.viewportTop, i}}, {key: "_getAffixTypeScrollingDown", value: function () {var t = this.dimensions, e = t.sidebarHeight + t.containerTop, i = t.viewportTop + t.topSpacing, n = t.viewportBottom - t.bottomSpacing, o = this.affixedType; return this.isSidebarFitsViewport() ? t.sidebarHeight + i >= t.containerBottom ? (t.translateY = t.containerBottom - e, o = "CONTAINER-BOTTOM") : i >= t.containerTop && (t.translateY = i - t.containerTop, o = "VIEWPORT-TOP") : t.containerBottom <= n ? (t.translateY = t.containerBottom - e, o = "CONTAINER-BOTTOM") : e + t.translateY <= n ? (t.translateY = n - e, o = "VIEWPORT-BOTTOM") : t.containerTop + t.translateY <= i && 0 !== t.translateY && t.maxTranslateY !== t.translateY && (o = "VIEWPORT-UNBOTTOM"), o}}, {key: "_getAffixTypeScrollingUp", value: function () {var t = this.dimensions, e = t.sidebarHeight + t.containerTop, i = t.viewportTop + t.topSpacing, n = t.viewportBottom - t.bottomSpacing, o = this.affixedType; return i <= t.translateY + t.containerTop ? (t.translateY = i - t.containerTop, o = "VIEWPORT-TOP") : t.containerBottom <= n ? (t.translateY = t.containerBottom - e, o = "CONTAINER-BOTTOM") : this.isSidebarFitsViewport() || t.containerTop <= i && 0 !== t.translateY && t.maxTranslateY !== t.translateY && (o = "VIEWPORT-UNBOTTOM"), o}}, {key: "_getStyle", value: function (t) {if (void 0 !== t) {var e = {inner: {}, outer: {}}, i = this.dimensions; switch (t) {case "VIEWPORT-TOP": e.inner = {position: "fixed", top: i.topSpacing, left: i.sidebarLeft - i.viewportLeft, width: i.sidebarWidth}; break; case "VIEWPORT-BOTTOM": e.inner = {position: "fixed", top: "auto", left: i.sidebarLeft, bottom: i.bottomSpacing, width: i.sidebarWidth}; break; case "CONTAINER-BOTTOM": case "VIEWPORT-UNBOTTOM": var n = this._getTranslate(0, i.translateY + "px"); e.inner = n ? {transform: n} : {position: "absolute", top: i.translateY, width: i.sidebarWidth}}switch (t) {case "VIEWPORT-TOP": case "VIEWPORT-BOTTOM": case "VIEWPORT-UNBOTTOM": case "CONTAINER-BOTTOM": e.outer = {height: i.sidebarHeight, position: "relative"}}return e.outer = c.extend({height: "", position: ""}, e.outer), e.inner = c.extend({position: "relative", top: "", left: "", bottom: "", width: "", transform: ""}, e.inner), e} }}, {key: "stickyPosition", value: function (t) {if (!this._breakpoint) {t = this._reStyle || t || !1, this.options.topSpacing, this.options.bottomSpacing; var e = this.getAffixType(), i = this._getStyle(e); if ((this.affixedType != e || t) && e) {var n = "affix." + e.toLowerCase().replace("viewport-", "") + l; for (var o in c.eventTrigger(this.sidebar, n), "STATIC" === e ? c.removeClass(this.sidebar, this.options.stickyClass) : c.addClass(this.sidebar, this.options.stickyClass), i.outer) {var s = "number" == typeof i.outer[o] ? "px" : ""; this.sidebar.style[o] = i.outer[o] + s} for (var r in i.inner) {var a = "number" == typeof i.inner[r] ? "px" : ""; this.sidebarInner.style[r] = i.inner[r] + a} var p = "affixed." + e.toLowerCase().replace("viewport-", "") + l; c.eventTrigger(this.sidebar, p)} else this._initialized && (this.sidebarInner.style.left = i.inner.left); this.affixedType = e} }}, {key: "_widthBreakpoint", value: function () {window.innerWidth <= this.options.minWidth ? (this._breakpoint = !0, this.affixedType = "STATIC", this.sidebar.removeAttribute("style"), c.removeClass(this.sidebar, this.options.stickyClass), this.sidebarInner.removeAttribute("style")) : this._breakpoint = !1}}, {key: "updateSticky", value: function () {var t, e = this, i = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}; this._running || (this._running = !0, t = i.type, requestAnimationFrame(function () {switch (t) {case "scroll": e._calcDimensionsWithScroll(), e.observeScrollDir(), e.stickyPosition(); break; case "resize": default: e._widthBreakpoint(), e.calcDimensions(), e.stickyPosition(!0)}e._running = !1}))}}, {key: "_setSupportFeatures", value: function () {var t = this.support; t.transform = c.supportTransform(), t.transform3d = c.supportTransform(!0)}}, {key: "_getTranslate", value: function () {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0; return this.support.transform3d ? "translate3d(" + t + ", " + e + ", " + i + ")" : !!this.support.translate && "translate(" + t + ", " + e + ")"}}, {key: "destroy", value: function () {window.removeEventListener("resize", this, {capture: !1}), window.removeEventListener("scroll", this, {capture: !1}), this.sidebar.classList.remove(this.options.stickyClass), this.sidebar.style.minHeight = "", this.sidebar.removeEventListener("update" + l, this); var t = {inner: {}, outer: {}}; for (var e in t.inner = {position: "", top: "", left: "", bottom: "", width: "", transform: ""}, t.outer = {height: "", position: ""}, t.outer) this.sidebar.style[e] = t.outer[e]; for (var i in t.inner) this.sidebarInner.style[i] = t.inner[i]; this.options.resizeSensor && "undefined" != typeof ResizeSensor && (ResizeSensor.detach(this.sidebarInner, this.handleEvent), ResizeSensor.detach(this.container, this.handleEvent))}}], [{key: "supportTransform", value: function (t) {var i = !1, e = t ? "perspective" : "transform", n = e.charAt(0).toUpperCase() + e.slice(1), o = document.createElement("support").style; return (e + " " + ["Webkit", "Moz", "O", "ms"].join(n + " ") + n).split(" ").forEach(function (t, e) {if (void 0 !== o[t]) return i = t, !1}), i}}, {key: "eventTrigger", value: function (t, e, i) {try {var n = new CustomEvent(e, {detail: i})} catch (t) {(n = document.createEvent("CustomEvent")).initCustomEvent(e, !0, !0, i)} t.dispatchEvent(n)}}, {key: "extend", value: function (t, e) {var i = {}; for (var n in t) void 0 !== e[n] ? i[n] = e[n] : i[n] = t[n]; return i}}, {key: "offsetRelative", value: function (t) {var e = {left: 0, top: 0}; do {var i = t.offsetTop, n = t.offsetLeft; isNaN(i) || (e.top += i), isNaN(n) || (e.left += n), t = "BODY" === t.tagName ? t.parentElement : t.offsetParent} while (t); return e}}, {key: "addClass", value: function (t, e) {c.hasClass(t, e) || (t.classList ? t.classList.add(e) : t.className += " " + e)}}, {key: "removeClass", value: function (t, e) {c.hasClass(t, e) && (t.classList ? t.classList.remove(e) : t.className = t.className.replace(new RegExp("(^|\\b)" + e.split(" ").join("|") + "(\\b|$)", "gi"), " "))}}, {key: "hasClass", value: function (t, e) {return t.classList ? t.classList.contains(e) : new RegExp("(^| )" + e + "( |$)", "gi").test(t.className)}}, {key: "defaults", get: function () {return n}}]), c}()); t.default = i, window.StickySidebar = i})(e)}(e = {exports: {}}, e.exports), e.exports), o = (i = n) && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i; t.default = o, t.__moduleExports = n, Object.defineProperty(t, "__esModule", {value: !0})});

if (document.querySelector('.js-sticky-sidebar')) {
    var sidebar = new StickySidebar('.js-sticky-sidebar', {
        topSpacing: 20,
        bottomSpacing: 20,
        containerSelector: '.js-sticky-main-content',
        innerWrapperSelector: '.js-sticky-sidebar__inner',
        minWidth: 1024
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
